<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Aug 04 08:27:30 2025
<BR><P>
<H3>Maximum Stack Usage =        200 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Wegui_loop_func &rArr; Wegui_uart_rx_stick &rArr; Wegui_uart_rx_default_func &rArr; Wegui_mlist_Enter_cursor &rArr; Wegui_enter_menu &rArr; Wegui_Push_Slider_tip
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[25]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
 <LI><a href="#[b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">HardFault_Handler</a><BR>
 <LI><a href="#[c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MemManage_Handler</a><BR>
 <LI><a href="#[e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">Set_langauge_Chinese</a> from lcd_wegui_menu_app.o(i.Set_langauge_Chinese) referenced 2 times from user_wegui_menu.o(.data)
 <LI><a href="#[6]">Set_langauge_English</a> from lcd_wegui_menu_app.o(i.Set_langauge_English) referenced 2 times from user_wegui_menu.o(.data)
 <LI><a href="#[12]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3f]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[15]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">USART2_IRQHandler</a> from stm32f103_wegui_uart_port.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3d]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">Uart_Screen_App_Begin</a> from lcd_wegui_menu_app.o(i.Uart_Screen_App_Begin) referenced 2 times from user_wegui_menu.o(.data)
 <LI><a href="#[1]">Uart_Screen_App_Loop</a> from lcd_wegui_menu_app.o(i.Uart_Screen_App_Loop) referenced 2 times from user_wegui_menu.o(.data)
 <LI><a href="#[2]">Uart_Screen_App_Quit</a> from lcd_wegui_menu_app.o(i.Uart_Screen_App_Quit) referenced 2 times from user_wegui_menu.o(.data)
 <LI><a href="#[3]">Uart_Screen_Refresh</a> from lcd_wegui_menu_app.o(i.Uart_Screen_Refresh) referenced 2 times from user_wegui_menu.o(.data)
 <LI><a href="#[e]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[40]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[42]">lcd_driver_Write_0</a> from lcd_driver.o(i.lcd_driver_Write_0) referenced from lcd_driver.o(i.OLED_Clear_GRAM)
 <LI><a href="#[42]">lcd_driver_Write_0</a> from lcd_driver.o(i.lcd_driver_Write_0) referenced from lcd_driver.o(i.OLED_Set_Driver_Mode)
 <LI><a href="#[45]">lcd_driver_Write_0_inBox</a> from lcd_driver.o(i.lcd_driver_Write_0_inBox) referenced from lcd_driver.o(i.OLED_Set_Driver_Mode)
 <LI><a href="#[41]">lcd_driver_Write_1</a> from lcd_driver.o(i.lcd_driver_Write_1) referenced from lcd_driver.o(i.OLED_Clear_GRAM)
 <LI><a href="#[41]">lcd_driver_Write_1</a> from lcd_driver.o(i.lcd_driver_Write_1) referenced from lcd_driver.o(i.OLED_Set_Driver_Mode)
 <LI><a href="#[44]">lcd_driver_Write_1_inBox</a> from lcd_driver.o(i.lcd_driver_Write_1_inBox) referenced from lcd_driver.o(i.OLED_Draw_Circel_part)
 <LI><a href="#[44]">lcd_driver_Write_1_inBox</a> from lcd_driver.o(i.lcd_driver_Write_1_inBox) referenced from lcd_driver.o(i.OLED_Draw_RBox)
 <LI><a href="#[44]">lcd_driver_Write_1_inBox</a> from lcd_driver.o(i.lcd_driver_Write_1_inBox) referenced from lcd_driver.o(i.OLED_Fill_Circel_part)
 <LI><a href="#[44]">lcd_driver_Write_1_inBox</a> from lcd_driver.o(i.lcd_driver_Write_1_inBox) referenced from lcd_driver.o(i.OLED_Fill_RBox)
 <LI><a href="#[44]">lcd_driver_Write_1_inBox</a> from lcd_driver.o(i.lcd_driver_Write_1_inBox) referenced from lcd_driver.o(i.OLED_Set_Driver_Mode)
 <LI><a href="#[43]">lcd_driver_Write_inv</a> from lcd_driver.o(i.lcd_driver_Write_inv) referenced from lcd_driver.o(i.OLED_Draw_Circel_part)
 <LI><a href="#[43]">lcd_driver_Write_inv</a> from lcd_driver.o(i.lcd_driver_Write_inv) referenced from lcd_driver.o(i.OLED_Draw_RBox)
 <LI><a href="#[43]">lcd_driver_Write_inv</a> from lcd_driver.o(i.lcd_driver_Write_inv) referenced from lcd_driver.o(i.OLED_Fill_Circel_part)
 <LI><a href="#[43]">lcd_driver_Write_inv</a> from lcd_driver.o(i.lcd_driver_Write_inv) referenced from lcd_driver.o(i.OLED_Fill_RBox)
 <LI><a href="#[43]">lcd_driver_Write_inv</a> from lcd_driver.o(i.lcd_driver_Write_inv) referenced from lcd_driver.o(i.OLED_Set_Driver_Mode)
 <LI><a href="#[46]">lcd_driver_Write_inv_inBox</a> from lcd_driver.o(i.lcd_driver_Write_inv_inBox) referenced from lcd_driver.o(i.OLED_Set_Driver_Mode)
 <LI><a href="#[5]">m_wDemo_wMessage_Pres2_func</a> from lcd_wegui_menu_app.o(i.m_wDemo_wMessage_Pres2_func) referenced 2 times from user_wegui_menu.o(.data)
 <LI><a href="#[4]">m_wDemo_wMessage_Pres_func</a> from lcd_wegui_menu_app.o(i.m_wDemo_wMessage_Pres_func) referenced 2 times from user_wegui_menu.o(.data)
 <LI><a href="#[3e]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[8]">update_Wegui_screen_brightness</a> from lcd_wegui_menu_app.o(i.update_Wegui_screen_brightness) referenced 2 times from user_wegui_menu.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[40]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[47]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[49]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[bb]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[bc]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[bd]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[be]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[bf]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[c0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_wDemo_wMessage_Pres2_func
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[c3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_init
</UL>

<P><STRONG><a name="[b9]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_init
</UL>

<P><STRONG><a name="[af]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_init
</UL>

<P><STRONG><a name="[b3]"></a>ADC_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_init
</UL>

<P><STRONG><a name="[b4]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_init
</UL>

<P><STRONG><a name="[b6]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_init
</UL>

<P><STRONG><a name="[b0]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_init
</UL>

<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Uart_Port_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_4key_port_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Port_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_init
</UL>

<P><STRONG><a name="[b1]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_init
</UL>

<P><STRONG><a name="[86]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Up
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Right
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Left
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Down
</UL>

<P><STRONG><a name="[56]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Func
</UL>

<P><STRONG><a name="[57]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Func
</UL>

<P><STRONG><a name="[58]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Func
</UL>

<P><STRONG><a name="[aa]"></a>Get_rxRing_len</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f103_wegui_uart_port.o(i.Get_rxRing_len))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_uart_rx_stick
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_uart_rx_default_func
</UL>

<P><STRONG><a name="[a5]"></a>Get_submenu_sum</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lcd_wegui_driver.o(i.Get_submenu_sum))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_mlist_cursor_Next
</UL>

<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>Key_par_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f103_wegui_4key_port.o(i.Key_par_Init))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_4key_port_Init
</UL>

<P><STRONG><a name="[87]"></a>Keysw_det</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, stm32f103_wegui_4key_port.o(i.Keysw_det))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Keysw_det
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Up
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Right
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Left
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Down
</UL>

<P><STRONG><a name="[4a]"></a>LCD_Port_Init</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, stm32f103_lcd_hard_4spi_port.o(i.LCD_Port_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_Port_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_driver_Init
</UL>

<P><STRONG><a name="[51]"></a>LCD_Refresh</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, stm32f103_lcd_hard_4spi_port.o(i.LCD_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_Refresh &rArr; ST7735_Set_Addr &rArr; LCD_Send_nCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Set_Addr
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SPI_DataSize_8b
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_driver_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_loop_func
</UL>

<P><STRONG><a name="[70]"></a>LCD_Send_1Dat</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f103_lcd_hard_4spi_port.o(i.LCD_Send_1Dat))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Clear
</UL>

<P><STRONG><a name="[54]"></a>LCD_Send_nCmd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f103_lcd_hard_4spi_port.o(i.LCD_Send_nCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Send_nCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SPI_DataSize_8b
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Set_Addr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Soft_Reset
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Sleep_Out
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Set_RGB565_Mode
</UL>

<P><STRONG><a name="[73]"></a>LCD_delay_ms</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f103_lcd_hard_4spi_port.o(i.LCD_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
</UL>

<P><STRONG><a name="[55]"></a>LED_Func</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(i.LED_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LED_Func
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Uart_Port_Init
</UL>

<P><STRONG><a name="[ab]"></a>OLED_Clear_Box</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, lcd_driver.o(i.OLED_Clear_Box))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_Clear_Box
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_update_info
</UL>

<P><STRONG><a name="[59]"></a>OLED_Clear_GRAM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd_driver.o(i.OLED_Clear_GRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_Clear_GRAM &rArr; OLED_Fill_value_GRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill_value_GRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_driver_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_loop_func
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Screen_App_Begin
</UL>

<P><STRONG><a name="[5b]"></a>OLED_Draw_Ascii</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lcd_driver.o(i.OLED_Draw_Ascii))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_Draw_Ascii &rArr; OLED_Draw_Bitmap &rArr; OLED_Draw_One_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_UTF8_String
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_show_mList
</UL>

<P><STRONG><a name="[5c]"></a>OLED_Draw_Bitmap</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, lcd_driver.o(i.OLED_Draw_Bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_Draw_Bitmap &rArr; OLED_Draw_One_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_One_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Unicode
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Ascii
</UL>

<P><STRONG><a name="[5e]"></a>OLED_Draw_Box</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lcd_driver.o(i.OLED_Draw_Box))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_Draw_Box &rArr; OLED_Draw_VLine
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_VLine
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_HLine
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_update_info
</UL>

<P><STRONG><a name="[61]"></a>OLED_Draw_Circel_part</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, lcd_driver.o(i.OLED_Draw_Circel_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_Draw_Circel_part &rArr; OLED_Draw_Pixl &rArr; OLED_Draw_One_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Pixl
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_RBox
</UL>

<P><STRONG><a name="[63]"></a>OLED_Draw_Line</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, lcd_driver.o(i.OLED_Draw_Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OLED_Draw_Line &rArr; OLED_Draw_Pixl &rArr; OLED_Draw_One_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Pixl
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_VLine
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_HLine
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_show_mList
</UL>

<P><STRONG><a name="[62]"></a>OLED_Draw_Pixl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_driver.o(i.OLED_Draw_Pixl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_Draw_Pixl &rArr; OLED_Draw_One_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_One_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill_Circel_part
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_RBox
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Line
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Circel_part
</UL>

<P><STRONG><a name="[64]"></a>OLED_Draw_RBox</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, lcd_driver.o(i.OLED_Draw_RBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OLED_Draw_RBox &rArr; OLED_Draw_Circel_part &rArr; OLED_Draw_Pixl &rArr; OLED_Draw_One_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Pixl
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_VLine
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_HLine
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Circel_part
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_show_tip
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_show_mList
</UL>

<P><STRONG><a name="[65]"></a>OLED_Draw_UTF8_String</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, lcd_driver.o(i.OLED_Draw_UTF8_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OLED_Draw_UTF8_String &rArr; OLED_Draw_Unicode &rArr; OLED_Draw_Bitmap &rArr; OLED_Draw_One_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Unicode
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Ascii
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Screen_App_Begin
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_show_tip
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_show_mList
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_update_info
</UL>

<P><STRONG><a name="[66]"></a>OLED_Draw_Unicode</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lcd_driver.o(i.OLED_Draw_Unicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OLED_Draw_Unicode &rArr; OLED_Draw_Bitmap &rArr; OLED_Draw_One_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_UTF8_String
</UL>

<P><STRONG><a name="[69]"></a>OLED_Fill_Box</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, lcd_driver.o(i.OLED_Fill_Box))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_Fill_Box
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill_RBox
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_show_mList
</UL>

<P><STRONG><a name="[67]"></a>OLED_Fill_Circel_part</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, lcd_driver.o(i.OLED_Fill_Circel_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_Fill_Circel_part &rArr; OLED_Draw_Pixl &rArr; OLED_Draw_One_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Pixl
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_VLine
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_HLine
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill_RBox
</UL>

<P><STRONG><a name="[68]"></a>OLED_Fill_RBox</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, lcd_driver.o(i.OLED_Fill_RBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OLED_Fill_RBox &rArr; OLED_Fill_Circel_part &rArr; OLED_Draw_Pixl &rArr; OLED_Draw_One_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_VLine
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_HLine
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill_Circel_part
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill_Box
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_show_tip
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_show_mList
</UL>

<P><STRONG><a name="[5a]"></a>OLED_Fill_value_GRAM</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_driver.o(i.OLED_Fill_value_GRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_Fill_value_GRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear_GRAM
</UL>

<P><STRONG><a name="[90]"></a>OLED_Get_UTF8_XLen</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lcd_driver.o(i.OLED_Get_UTF8_XLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_Get_UTF8_XLen
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_show_tip
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_show_mList
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Push_Message_tip
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_update_info
</UL>

<P><STRONG><a name="[91]"></a>OLED_Get_UTF8_YLine</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, lcd_driver.o(i.OLED_Get_UTF8_YLine))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_show_tip
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Push_Slider_tip
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Push_Message_tip
</UL>

<P><STRONG><a name="[ad]"></a>OLED_Set_Driver_Box</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, lcd_driver.o(i.OLED_Set_Driver_Box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_Set_Driver_Box
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_driver_Init
</UL>

<P><STRONG><a name="[a7]"></a>OLED_Set_Driver_Mode</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lcd_driver.o(i.OLED_Set_Driver_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_Set_Driver_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_driver_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_show_tip
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_show_mList
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_update_info
</UL>

<P><STRONG><a name="[6a]"></a>OLED_Wegui_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lcd_wegui_driver.o(i.OLED_Wegui_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = OLED_Wegui_Init &rArr; Wegui_Uart_Port_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Uart_Port_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_4key_port_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_mList_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Hello_Word
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_init
</UL>

<P><STRONG><a name="[4f]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Port_Init
</UL>

<P><STRONG><a name="[97]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Uart_Port_Init
</UL>

<P><STRONG><a name="[4b]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Uart_Port_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_4key_port_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Port_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_init
</UL>

<P><STRONG><a name="[7d]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[4c]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Port_Init
</UL>

<P><STRONG><a name="[a9]"></a>Read_rxRing_buff</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f103_wegui_uart_port.o(i.Read_rxRing_buff))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_uart_rx_default_func
</UL>

<P><STRONG><a name="[4e]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Port_Init
</UL>

<P><STRONG><a name="[4d]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Port_Init
</UL>

<P><STRONG><a name="[6f]"></a>ST7735_Clear</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, st7735.o(i.ST7735_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ST7735_Clear &rArr; ST7735_Set_Addr &rArr; LCD_Send_nCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Set_Addr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Send_1Dat
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
</UL>

<P><STRONG><a name="[71]"></a>ST7735_Init</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, st7735.o(i.ST7735_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ST7735_Init &rArr; ST7735_Clear &rArr; ST7735_Set_Addr &rArr; LCD_Send_nCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_delay_ms
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Send_nCmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Soft_Reset
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Sleep_Out
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Set_RGB565_Mode
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Clear
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_driver_Init
</UL>

<P><STRONG><a name="[52]"></a>ST7735_Set_Addr</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, st7735.o(i.ST7735_Set_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ST7735_Set_Addr &rArr; LCD_Send_nCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Send_nCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Refresh
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Clear
</UL>

<P><STRONG><a name="[76]"></a>ST7735_Set_RGB565_Mode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st7735.o(i.ST7735_Set_RGB565_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ST7735_Set_RGB565_Mode &rArr; LCD_Send_nCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Send_nCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
</UL>

<P><STRONG><a name="[74]"></a>ST7735_Sleep_Out</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st7735.o(i.ST7735_Sleep_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ST7735_Sleep_Out &rArr; LCD_Send_nCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Send_nCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
</UL>

<P><STRONG><a name="[72]"></a>ST7735_Soft_Reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st7735.o(i.ST7735_Soft_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ST7735_Soft_Reset &rArr; LCD_Send_nCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Send_nCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
</UL>

<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>Set_langauge_Chinese</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_wegui_menu_app.o(i.Set_langauge_Chinese))
<BR>[Address Reference Count : 1]<UL><LI> user_wegui_menu.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>Set_langauge_English</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_wegui_menu_app.o(i.Set_langauge_English))
<BR>[Address Reference Count : 1]<UL><LI> user_wegui_menu.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_1ms_stick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>USART2_IRQHandler</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32f103_wegui_uart_port.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_rxRing
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Uart_Port_Init
</UL>

<P><STRONG><a name="[94]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_UartSend_1Dat
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_uart_rx_default_func
</UL>

<P><STRONG><a name="[79]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Uart_Port_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_uart_rx_default_func
</UL>

<P><STRONG><a name="[7c]"></a>USART_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Uart_Port_Init
</UL>

<P><STRONG><a name="[7a]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_uart_rx_default_func
</UL>

<P><STRONG><a name="[95]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_UartSend_1Dat
</UL>

<P><STRONG><a name="[0]"></a>Uart_Screen_App_Begin</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcd_wegui_menu_app.o(i.Uart_Screen_App_Begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Uart_Screen_App_Begin &rArr; OLED_Draw_UTF8_String &rArr; OLED_Draw_Unicode &rArr; OLED_Draw_Bitmap &rArr; OLED_Draw_One_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_UTF8_String
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear_GRAM
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_get_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_wegui_menu.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>Uart_Screen_App_Loop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_wegui_menu_app.o(i.Uart_Screen_App_Loop))
<BR>[Address Reference Count : 1]<UL><LI> user_wegui_menu.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>Uart_Screen_App_Quit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_wegui_menu_app.o(i.Uart_Screen_App_Quit))
<BR>[Address Reference Count : 1]<UL><LI> user_wegui_menu.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>Uart_Screen_Refresh</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_wegui_menu_app.o(i.Uart_Screen_Refresh))
<BR>[Address Reference Count : 1]<UL><LI> user_wegui_menu.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>Wegui_1ms_stick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd_wegui_driver.o(i.Wegui_1ms_stick))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6b]"></a>Wegui_4key_port_Init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32f103_wegui_4key_port.o(i.Wegui_4key_port_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Wegui_4key_port_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_par_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Wegui_Init
</UL>

<P><STRONG><a name="[6e]"></a>Wegui_Hello_Word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_wegui_driver.o(i.Wegui_Hello_Word))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Wegui_Hello_Word &rArr; Wegui_Push_Message_tip &rArr; OLED_Get_UTF8_XLen
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Push_Message_tip
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Wegui_Init
</UL>

<P><STRONG><a name="[81]"></a>Wegui_Interface_stick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f103_wegui_4key_port.o(i.Wegui_Interface_stick))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Wegui_Interface_stick &rArr; Wegui_Key_Up &rArr; Wegui_mlist_Back_menu &rArr; Wegui_enter_menu &rArr; Wegui_Push_Slider_tip
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Up
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Right
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Left
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Down
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_loop_func
</UL>

<P><STRONG><a name="[80]"></a>Wegui_Push_Message_tip</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lcd_wegui_tip.o(i.Wegui_Push_Message_tip))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Wegui_Push_Message_tip &rArr; OLED_Get_UTF8_XLen
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Get_UTF8_YLine
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Get_UTF8_XLen
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_enter_menu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Hello_Word
</UL>

<P><STRONG><a name="[92]"></a>Wegui_Push_Slider_tip</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, lcd_wegui_tip.o(i.Wegui_Push_Slider_tip))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Wegui_Push_Slider_tip
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Get_UTF8_YLine
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_enter_menu
</UL>

<P><STRONG><a name="[88]"></a>Wegui_Tip_Quit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd_wegui_tip.o(i.Wegui_Tip_Quit))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_uart_rx_default_func
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Up
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Right
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Left
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Down
</UL>

<P><STRONG><a name="[8e]"></a>Wegui_Tip_Save_andQuit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lcd_wegui_tip.o(i.Wegui_Tip_Save_andQuit))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_uart_rx_default_func
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Up
</UL>

<P><STRONG><a name="[8c]"></a>Wegui_Tip_Value_Add</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lcd_wegui_tip.o(i.Wegui_Tip_Value_Add))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_uart_rx_default_func
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Right
</UL>

<P><STRONG><a name="[8b]"></a>Wegui_Tip_Value_Dec</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lcd_wegui_tip.o(i.Wegui_Tip_Value_Dec))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_uart_rx_default_func
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Left
</UL>

<P><STRONG><a name="[93]"></a>Wegui_UartSend_1Dat</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32f103_wegui_uart_port.o(i.Wegui_UartSend_1Dat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Wegui_UartSend_1Dat
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_UartSend_nDat
</UL>

<P><STRONG><a name="[96]"></a>Wegui_UartSend_nDat</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f103_wegui_uart_port.o(i.Wegui_UartSend_nDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Wegui_UartSend_nDat &rArr; Wegui_UartSend_1Dat
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_UartSend_1Dat
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_uart_rx_default_func
</UL>

<P><STRONG><a name="[6c]"></a>Wegui_Uart_Port_Init</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, stm32f103_wegui_uart_port.o(i.Wegui_Uart_Port_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Wegui_Uart_Port_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxRing_par_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Wegui_Init
</UL>

<P><STRONG><a name="[9c]"></a>Wegui_enter_menu</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, lcd_wegui_driver.o(i.Wegui_enter_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Wegui_enter_menu &rArr; Wegui_Push_Slider_tip
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_mList_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Push_Slider_tip
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Push_Message_tip
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_get_string
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_uart_rx_default_func
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_mlist_Enter_cursor
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_mlist_Back_menu
</UL>

<P><STRONG><a name="[7e]"></a>Wegui_get_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_wegui_driver.o(i.Wegui_get_string))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_enter_menu
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_wDemo_wMessage_Pres2_func
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Screen_App_Begin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_show_mList
</UL>

<P><STRONG><a name="[9d]"></a>Wegui_loop_func</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, lcd_wegui_driver.o(i.Wegui_loop_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Wegui_loop_func &rArr; Wegui_uart_rx_stick &rArr; Wegui_uart_rx_default_func &rArr; Wegui_mlist_Enter_cursor &rArr; Wegui_enter_menu &rArr; Wegui_Push_Slider_tip
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_uart_rx_stick
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Interface_stick
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear_GRAM
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Refresh
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_wDemo_wMessage_ADC_func
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_show_tip
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_show_mList
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_update_info
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reflash_fps
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reflash_CpuLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>Wegui_mList_Init</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, lcd_wegui_menu_mlist.o(i.Wegui_mList_Init))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_enter_menu
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Wegui_Init
</UL>

<P><STRONG><a name="[8a]"></a>Wegui_mlist_Back_menu</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcd_wegui_menu_mlist.o(i.Wegui_mlist_Back_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Wegui_mlist_Back_menu &rArr; Wegui_enter_menu &rArr; Wegui_Push_Slider_tip
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_enter_menu
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_uart_rx_default_func
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Up
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Right
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Left
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Down
</UL>

<P><STRONG><a name="[8d]"></a>Wegui_mlist_Enter_cursor</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lcd_wegui_menu_mlist.o(i.Wegui_mlist_Enter_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Wegui_mlist_Enter_cursor &rArr; Wegui_enter_menu &rArr; Wegui_Push_Slider_tip
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_enter_menu
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_uart_rx_default_func
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Right
</UL>

<P><STRONG><a name="[89]"></a>Wegui_mlist_cursor_Next</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_wegui_menu_mlist.o(i.Wegui_mlist_cursor_Next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Wegui_mlist_cursor_Next
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_submenu_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_uart_rx_default_func
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Down
</UL>

<P><STRONG><a name="[8f]"></a>Wegui_mlist_cursor_Prev</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd_wegui_menu_mlist.o(i.Wegui_mlist_cursor_Prev))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_uart_rx_default_func
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Key_Up
</UL>

<P><STRONG><a name="[9f]"></a>Wegui_show_mList</STRONG> (Thumb, 1228 bytes, Stack size 48 bytes, lcd_wegui_menu_mlist.o(i.Wegui_show_mList))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Wegui_show_mList &rArr; OLED_Draw_UTF8_String &rArr; OLED_Draw_Unicode &rArr; OLED_Draw_Bitmap &rArr; OLED_Draw_One_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Get_UTF8_XLen
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Ascii
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Driver_Mode
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill_RBox
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill_Box
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_UTF8_String
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_RBox
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Line
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_get_string
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_loop_func
</UL>

<P><STRONG><a name="[a0]"></a>Wegui_show_tip</STRONG> (Thumb, 676 bytes, Stack size 48 bytes, lcd_wegui_tip.o(i.Wegui_show_tip))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Wegui_show_tip &rArr; OLED_Draw_UTF8_String &rArr; OLED_Draw_Unicode &rArr; OLED_Draw_Bitmap &rArr; OLED_Draw_One_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Get_UTF8_YLine
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Get_UTF8_XLen
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Driver_Mode
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill_RBox
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_UTF8_String
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_RBox
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_loop_func
</UL>

<P><STRONG><a name="[a4]"></a>Wegui_uart_rx_stick</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f103_wegui_uart_port.o(i.Wegui_uart_rx_stick))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Wegui_uart_rx_stick &rArr; Wegui_uart_rx_default_func &rArr; Wegui_mlist_Enter_cursor &rArr; Wegui_enter_menu &rArr; Wegui_Push_Slider_tip
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rxRing_par_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_rxRing_len
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_uart_rx_default_func
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_loop_func
</UL>

<P><STRONG><a name="[7b]"></a>Write_rxRing</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f103_wegui_uart_port.o(i.Write_rxRing))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c7]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a6]"></a>itoa</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, lcd_wegui_driver.o(i.itoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = itoa
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_wDemo_wMessage_Pres_func
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_wDemo_wMessage_ADC_func
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_show_tip
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_show_mList
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_update_info
</UL>

<P><STRONG><a name="[ac]"></a>lcd_driver_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lcd_driver.o(i.lcd_driver_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lcd_driver_Init &rArr; ST7735_Init &rArr; ST7735_Clear &rArr; ST7735_Set_Addr &rArr; LCD_Send_nCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Driver_Box
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Port_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Driver_Mode
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear_GRAM
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>m_wDemo_wMessage_ADC_func</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_wegui_menu_app.o(i.m_wDemo_wMessage_ADC_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_wDemo_wMessage_ADC_func &rArr; itoa
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_loop_func
</UL>

<P><STRONG><a name="[5]"></a>m_wDemo_wMessage_Pres2_func</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, lcd_wegui_menu_app.o(i.m_wDemo_wMessage_Pres2_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = m_wDemo_wMessage_Pres2_func
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_get_string
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_wegui_menu.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>m_wDemo_wMessage_Pres_func</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_wegui_menu_app.o(i.m_wDemo_wMessage_Pres_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m_wDemo_wMessage_Pres_func &rArr; itoa
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_wegui_menu.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>main</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = main &rArr; Wegui_loop_func &rArr; Wegui_uart_rx_stick &rArr; Wegui_uart_rx_default_func &rArr; Wegui_mlist_Enter_cursor &rArr; Wegui_enter_menu &rArr; Wegui_Push_Slider_tip
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_driver_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_loop_func
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Wegui_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[9b]"></a>rxRing_par_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f103_wegui_uart_port.o(i.rxRing_par_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_uart_rx_stick
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Uart_Port_Init
</UL>

<P><STRONG><a name="[ae]"></a>startup_init</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, main.o(i.startup_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = startup_init &rArr; GPIO_PinRemapConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>update_Wegui_screen_brightness</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_wegui_menu_app.o(i.update_Wegui_screen_brightness))
<BR>[Address Reference Count : 1]<UL><LI> user_wegui_menu.o(.data)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[78]"></a>SetSysClockTo72</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[53]"></a>Set_SPI_DataSize_8b</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f103_lcd_hard_4spi_port.o(i.Set_SPI_DataSize_8b))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Send_nCmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Refresh
</UL>

<P><STRONG><a name="[83]"></a>Wegui_Key_Down</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f103_wegui_4key_port.o(i.Wegui_Key_Down))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Wegui_Key_Down &rArr; Wegui_mlist_Back_menu &rArr; Wegui_enter_menu &rArr; Wegui_Push_Slider_tip
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_mlist_cursor_Next
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_mlist_Back_menu
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Tip_Quit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keysw_det
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Interface_stick
</UL>

<P><STRONG><a name="[84]"></a>Wegui_Key_Left</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32f103_wegui_4key_port.o(i.Wegui_Key_Left))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Wegui_Key_Left &rArr; Wegui_mlist_Back_menu &rArr; Wegui_enter_menu &rArr; Wegui_Push_Slider_tip
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_mlist_Back_menu
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Tip_Value_Dec
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Tip_Quit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keysw_det
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Interface_stick
</UL>

<P><STRONG><a name="[85]"></a>Wegui_Key_Right</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f103_wegui_4key_port.o(i.Wegui_Key_Right))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Wegui_Key_Right &rArr; Wegui_mlist_Enter_cursor &rArr; Wegui_enter_menu &rArr; Wegui_Push_Slider_tip
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_mlist_Enter_cursor
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_mlist_Back_menu
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Tip_Value_Add
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Tip_Quit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keysw_det
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Interface_stick
</UL>

<P><STRONG><a name="[82]"></a>Wegui_Key_Up</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, stm32f103_wegui_4key_port.o(i.Wegui_Key_Up))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Wegui_Key_Up &rArr; Wegui_mlist_Back_menu &rArr; Wegui_enter_menu &rArr; Wegui_Push_Slider_tip
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_mlist_cursor_Prev
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_mlist_Back_menu
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Tip_Save_andQuit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Tip_Quit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keysw_det
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Interface_stick
</UL>

<P><STRONG><a name="[a8]"></a>Wegui_uart_rx_default_func</STRONG> (Thumb, 808 bytes, Stack size 72 bytes, stm32f103_wegui_uart_port.o(i.Wegui_uart_rx_default_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Wegui_uart_rx_default_func &rArr; Wegui_mlist_Enter_cursor &rArr; Wegui_enter_menu &rArr; Wegui_Push_Slider_tip
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_enter_menu
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_UartSend_nDat
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_rxRing_buff
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_rxRing_len
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_mlist_cursor_Prev
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_mlist_cursor_Next
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_mlist_Enter_cursor
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_mlist_Back_menu
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Tip_Value_Dec
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Tip_Value_Add
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Tip_Save_andQuit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_Tip_Quit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_uart_rx_stick
</UL>

<P><STRONG><a name="[60]"></a>OLED_Draw_HLine</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lcd_driver.o(i.OLED_Draw_HLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_Draw_HLine
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill_RBox
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill_Circel_part
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_RBox
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Line
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Box
</UL>

<P><STRONG><a name="[5d]"></a>OLED_Draw_One_Byte</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, lcd_driver.o(i.OLED_Draw_One_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_Draw_One_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Pixl
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Bitmap
</UL>

<P><STRONG><a name="[5f]"></a>OLED_Draw_VLine</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, lcd_driver.o(i.OLED_Draw_VLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_Draw_VLine
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill_RBox
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill_Circel_part
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_RBox
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Line
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Box
</UL>

<P><STRONG><a name="[42]"></a>lcd_driver_Write_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd_driver.o(i.lcd_driver_Write_0))
<BR>[Address Reference Count : 2]<UL><LI> lcd_driver.o(i.OLED_Set_Driver_Mode)
<LI> lcd_driver.o(i.OLED_Clear_GRAM)
</UL>
<P><STRONG><a name="[45]"></a>lcd_driver_Write_0_inBox</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lcd_driver.o(i.lcd_driver_Write_0_inBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_driver_Write_0_inBox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_driver.o(i.OLED_Set_Driver_Mode)
</UL>
<P><STRONG><a name="[41]"></a>lcd_driver_Write_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd_driver.o(i.lcd_driver_Write_1))
<BR>[Address Reference Count : 2]<UL><LI> lcd_driver.o(i.OLED_Set_Driver_Mode)
<LI> lcd_driver.o(i.OLED_Clear_GRAM)
</UL>
<P><STRONG><a name="[44]"></a>lcd_driver_Write_1_inBox</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, lcd_driver.o(i.lcd_driver_Write_1_inBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lcd_driver_Write_1_inBox
</UL>
<BR>[Address Reference Count : 5]<UL><LI> lcd_driver.o(i.OLED_Draw_Circel_part)
<LI> lcd_driver.o(i.OLED_Draw_RBox)
<LI> lcd_driver.o(i.OLED_Fill_Circel_part)
<LI> lcd_driver.o(i.OLED_Fill_RBox)
<LI> lcd_driver.o(i.OLED_Set_Driver_Mode)
</UL>
<P><STRONG><a name="[43]"></a>lcd_driver_Write_inv</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd_driver.o(i.lcd_driver_Write_inv))
<BR>[Address Reference Count : 5]<UL><LI> lcd_driver.o(i.OLED_Draw_Circel_part)
<LI> lcd_driver.o(i.OLED_Draw_RBox)
<LI> lcd_driver.o(i.OLED_Fill_Circel_part)
<LI> lcd_driver.o(i.OLED_Fill_RBox)
<LI> lcd_driver.o(i.OLED_Set_Driver_Mode)
</UL>
<P><STRONG><a name="[46]"></a>lcd_driver_Write_inv_inBox</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, lcd_driver.o(i.lcd_driver_Write_inv_inBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lcd_driver_Write_inv_inBox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_driver.o(i.OLED_Set_Driver_Mode)
</UL>
<P><STRONG><a name="[a2]"></a>Reflash_CpuLoad</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lcd_wegui_driver.o(i.Reflash_CpuLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Reflash_CpuLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_loop_func
</UL>

<P><STRONG><a name="[a3]"></a>Reflash_fps</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lcd_wegui_driver.o(i.Reflash_fps))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Reflash_fps
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_loop_func
</UL>

<P><STRONG><a name="[a1]"></a>Wegui_update_info</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, lcd_wegui_driver.o(i.Wegui_update_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Wegui_update_info &rArr; OLED_Draw_UTF8_String &rArr; OLED_Draw_Unicode &rArr; OLED_Draw_Bitmap &rArr; OLED_Draw_One_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Get_UTF8_XLen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear_Box
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Driver_Mode
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_UTF8_String
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Box
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wegui_loop_func
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
